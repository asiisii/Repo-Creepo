describe('Search page', () => {
  beforeEach(() => {
    cy.visit('http://localhost:3000')
  })

  it('should be able to see all the content in search page', () => {
    cy.get('.SearchPage')
      .find('header').should('have.text', 'RepoCrðŸ‘€po')
      .get('form')
      .find('input[name="repoName"]').should('have.value', '')
      .type('reactionary')
      .get('select').eq(0).should('have.value', null)
      .select('javascript')
      .get('select').eq(1).should('have.value', null)
      .select('Yes')
      .get('.search-msg')
      .should('have.text', 'Please start by searching a repository')
      .get('.card').should('not.exist')
      .get('.previous').should('not.exist')
      .get('.next').should('not.exist')
      .get('.page-num').should('not.exist')
      // intercept fetch call and give reactionary repo dummy data page 1
      .interceptReactionary()
      .get('button[value="Submit"]').should('have.text', 'Submit').click()
      .get('.page-num').should('exist').should('have.text', '  Page Num:  1')
      .get('.search-msg').should('not.exist')
      .get('.previous').should('not.exist')
      .get('.next').should('exist')
      .get('.card').should('exist').should('have.length', 30)
      // intercept fetch call and give reactionary repo dummy data page 2
      .interceptReactionary2()
      .get('.next').click()
      .get('.previous').should('exist')
      .get('.page-num').should('exist').should('have.text', '  Page Num:  2')
      .get('.next').should('not.exist')
      //test to see if both the previous and next button updates the DOM or not
      .get('.previous').click()
      .get('.search-msg').should('not.exist')
      .get('.previous').should('not.exist')
      .get('.next').should('exist')
      .get('.card').should('exist').should('have.length', 30)
      .get('.page-num').should('exist').should('have.text', '  Page Num:  1')
  })

  it('should be a controlled form', () => {
    cy.get('input[name="repoName"]').type('reactionary')
      .should('have.value', 'reactionary')
      .get('select').eq(0).select('c')
      .should('have.value', 'c')
      .get('select').eq(0).select('javascript')
      .should('have.value', 'javascript')
      .get('select').eq(1).select('No')
      .should('have.value', '/')
      .get('select').eq(1).select('Yes')
      .should('have.value', '&sort=stars')
  })

  it('should display 30 repository cards', () => {
    cy.get('input[name="repoName"]').type('reactionary')
      .get('select').eq(0).select('javascript')
      .get('select').eq(1).select('Yes')
      // intercept fetch call and give reactionary repo dummy data
      .interceptReactionary()
      .get('button[value="Submit"]').click()
      .get('.card').should('have.length', 30)
  })

  it('should update DOM with pagination', () => {
    cy.get('input[name="repoName"]').type('reactionary')
      .get('select').eq(0).select('javascript')
      .get('select').eq(1).select('Yes')
      // intercept fetch call and give reactionary repo dummy data page 1
      .interceptReactionary()
      .get('button[value="Submit"]').click()
      .get('article.card').eq(0)
      .get('.view').should('exist')
      .get('article.card').eq(0)
      .find('h2').should('have.length', 4)
      .eq(0).contains('Repo Name: Reactionary')
      .get('article.card').eq(0).find('h2')
      .eq(1).contains('#\'s of stars: 1')
      .get('article.card').eq(0).find('h2')
      .eq(2).contains('Language: JavaScript')
      .get('article.card').eq(0).find('h2')
      .eq(3).contains('Owner: a')
       // intercept fetch call and give reactionary repo dummy data page 2
      .interceptReactionary2()
      .get('.next').click()
      .get('article.card').eq(0)
      .find('h2').should('have.length', 4)
      .eq(0).contains('Repo Name: Reactionary')
      .get('article.card').eq(0).find('h2')
      .eq(1).contains('#\'s of stars: 31')
      .get('article.card').eq(0).find('h2')
      .eq(2).contains('Language: JavaScript')
      .get('article.card').eq(0).find('h2')
      .eq(3).contains('Owner: xyz')
  })
})